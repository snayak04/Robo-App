{"version":3,"sources":["serviceWorker.js","modules/Card.js","modules/CardList.js","modules/SearchBox.js","modules/Loading.js","modules/Scroll.js","components/ErrorBoudary.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","_ref","CardsArray","robots","map","user","modules_Card","key","SearchBox","searchChange","searchField","type","placeholder","onChange","Loading","Scroll","style","overflow","borderTop","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearch","event","target","value","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","modules_SearchBox","modules_Scroll","ErrorBoudary","modules_CardList","modules_Loading","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ccd0cb4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n    const {name, email, id} = props; //ES6 destructuring\n    return(\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow shadow-5 bw2 \">\n            <img src={`https://robohash.org/${id}?200x200`} alt={name}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => { //inline destructring based on ES6\n    const CardsArray = robots.map((user)=>{//.map returns a new array, where as forEach is a void function and we need to use the callback\n        return <Card key={user.id} id={user.id} name={user.name} email={user.email} /> \n    });\n    return(\n        <div>\n            {CardsArray}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange, searchField}) =>{\n    return(\n        <div className=\"pa2\">\n            <input \n            className=\"pa2 ba b--green bg-lightest-blue\" \n            type=\"search\" \n            placeholder=\"Search Robots\" \n            onChange={searchChange}/>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Loading = () => {\n    return <h1>Loading...</h1>\n}\n\nexport default Loading;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow : 'scroll', borderTop:'3px solid black', height:'800px' }}>\n            {props.children}\n        </div>\n    );\n} \n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({hasError:true});\n    }\n\n    render(){\n        if (this.state.hasError)\n            return <h1>Ooops! Somethins is broken!</h1>\n        else\n            return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;\n","import React, {Component} from 'react';\nimport CardList from '../modules/CardList';\nimport SearchBox from '../modules/SearchBox';\nimport './App.css';\nimport Loading from '../modules/Loading';\nimport Scroll from '../modules/Scroll';\nimport ErrorBoundary from './ErrorBoudary';\n\nclass App extends Component{ \n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchField: \"\"\n        }\n    };\n\n/*Any custom function in JSX has to follow the arrow funcitons *\n@updated this.searchField value*/\n    onSearch = (event) => {\n        //setting state:\n        this.setState({ searchField: event.target.value});\n    };\n    \n    /*\n    The cycle is:\n    1. Constructor\n    2. static getDerivedStateFromProps()\n    3. render()\n    4. componentDidMount()\n    if componenetDidMount() then render() aagain.\n    */\n    componentDidMount(){\n        //Using API to getch response.\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users})); \n        //if used without {, they will return by default\n    }\n\n    render(){\n        var filteredRobots = this.state.robots.filter(robot => {\n            return robot.name.toLocaleLowerCase().includes(this.state.searchField.toLocaleLowerCase());\n        });\n        if(!this.state.robots.length){\n            return <Loading />\n        }else{\n        return(\n            <div className=\"tc\">\n                <h1 className=\"f1\">Robo App</h1>\n                <SearchBox searchChange={this.onSearch} />\n                <Scroll>\n                    <ErrorBoundary>\n                        { <CardList robots={filteredRobots}/> /*Abstracting Cards into CardList with CardList being the parent, and Cards its child. */ }\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n        }\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './components/App';\n\nReactDOM.render(\n    <App /> //Abstracting out everything into App being the top most node.\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}